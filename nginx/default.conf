server {
    listen 80;

    location /web/ {
        proxy_pass http://web;
        rewrite ^/web/(.*)$ /$1 break;
    }

    location / {
        proxy_pass http://192.168.10.173:3000/;

        # If using a location other than just `/`, we need to rewrite all of the /red/ URLS to remove the `red` part
        # If we don't, the node.js server won't understand the requests
        #rewrite ^/pgadmin/(.*)$ /$1 break;

        #Defines the HTTP protocol version for proxying by default it it set to 1.0.
        #For Websockets and keepalive connections you need to use the version 1.1
        proxy_http_version 1.1;

        #Sets conditions under which the response will not be taken from a cache.
        proxy_cache_bypass $http_upgrade;

        #These header fields are required if your application is using Websockets
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        #The $host variable in the following order of precedence contains:
        #hostname from the request line, or hostname from the Host request header field
        #or the server name matching a request.
        proxy_set_header Host $host;

        #Forwards the real visitor remote IP address to the proxied server
        proxy_set_header X-Real-IP $remote_addr;

        #A list containing the IP addresses of every server the client has been proxied through
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        #When used inside an HTTPS server block, each HTTP response from the proxied server is rewritten to HTTPS.
        proxy_set_header X-Forwarded-Proto $scheme;

        #Defines the original host requested by the client.
        proxy_set_header X-Forwarded-Host $host;

        #Defines the original port requested by the client.
        proxy_set_header X-Forwarded-Port $server_port;
    }
}